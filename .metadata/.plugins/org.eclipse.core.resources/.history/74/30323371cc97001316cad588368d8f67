package ggow.teamt.mdrs;

import java.io.File;
import java.io.IOException;
import java.util.LinkedHashMap;

import android.app.ActionBar;
import android.app.Activity;
import android.app.Dialog;
import android.app.Notification;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.IntentSender;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.PixelFormat;
import android.location.Location;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.os.Environment;
import android.os.IBinder;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;

public class RecordingActivity extends FragmentActivity implements
GooglePlayServicesClient.ConnectionCallbacks,
GooglePlayServicesClient.OnConnectionFailedListener, 
LocationListener {

	private Class audioRecording;

	private static final String LOG_TAG = "MDRS - RecordingActivity";
	private final static int CONNECTION_FAILURE_RESOLUTION_REQUEST = 9000;
	private static final int MILLISECONDS_PER_SECOND = 1000;
	public static final int UPDATE_INTERVAL_IN_SECONDS = 5;
	private static final long UPDATE_INTERVAL =	MILLISECONDS_PER_SECOND * UPDATE_INTERVAL_IN_SECONDS;
	private static final int FASTEST_INTERVAL_IN_SECONDS = 1;

	//Location stuff
	private LocationRequest mLocationRequest;
	private LocationClient mLocationClient;
	private boolean mUpdatesRequested;
	private Editor mEditor;
	private SharedPreferences mPrefs;
	public static LinkedHashMap<Long, Location> locationTrail;

	//Intent stuff
	public final static String TRAIL = "ggow.teamt.MDRS.trail";
	public final static String AUDIO = "ggow.teamt.MDRS.audio";

	//Old Audio Stuff
	//private MediaRecorder mRecorder;  //NOTE: Moved to new private audioRecording Class to support background recording
	//private String folderTime;
	//public static String AudioPath;


	private class audioRecording extends Service implements SurfaceHolder.Callback {

		private MediaRecorder mRecorder;
		private String folderTime;
		public String AudioPath;
		private WindowManager windowManager;
		private SurfaceView surfaceView;

		public void onCreate(Bundle savedInstanceState){
			//Background recording
			Notification notification = new Notification.Builder(this)
				.setContentTitle("MDRS Recording...")
				.setContentText("")
				.setSmallIcon(R.drawable.ic_launcher)
				.build();
			startForeground(1234, notification);
			
			windowManager = (WindowManager) this.getSystemService(Context.WINDOW_SERVICE);
			surfaceView = new SurfaceView(this);
			LayoutParams layoutParams = new WindowManager.LayoutParams(  //Don't know what to set this as
					1,1,
					WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY,
					WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH,
					PixelFormat.TRANSLUCENT);
			layoutParams.gravity = Gravity.LEFT | Gravity.TOP;
			windowManager.addView(surfaceView, layoutParams);
			surfaceView.getHolder().addCallback(this);
			
			//Audio Recording setup
			folderTime = String.valueOf(System.currentTimeMillis());
			AudioPath = folderTime + "/audio.3gp";
			Log.v(LOG_TAG, "path before prep is: " + AudioPath);
			PathPrep(AudioPath);
			Log.v(LOG_TAG, "path after prep is: " + AudioPath);
			directoryCheck();
			try {
				AudioRecordStart(); //TODO change to surfaceCreated
			} catch (IOException e) {
				e.printStackTrace();
			}
			

		}
		
		@Override
		public void surfaceCreated(SurfaceHolder surfaceHolder) {
			
			mRecorder = new MediaRecorder();
			mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
			mRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
			mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
			//mRecorder.setAudioEncodingBitRate(16);  //TODO Enable these if want to improve
			//mRecorder.setAudioSamplingRate(44100);  //audio quality
			mRecorder.setOutputFile(AudioPath);
			//TODO add in higher sampling and encoding rates

			try {
				mRecorder.prepare();
			} catch (IOException e) {
				Log.e(LOG_TAG, "prepare() for recording failed");
			}
			mRecorder.start();
		}
		
		@Override
		public void onDestroy() {
			mRecorder.stop();
			mRecorder.reset();
			mRecorder.release();
			
			windowManager.removeView(surfaceView);
		}
		
		@Override
		public void surfaceChanged(SurfaceHolder surfaceHolder, int format, int width, int height) {}
		
		@Override
		public void surfaceDestroyed(SurfaceHolder surfaceHolder){}
		
		@Override
		public IBinder onBind(Intent intent) {
			return null;
		}
		

		public void PathPrep(String path) {
			AudioPath = sanitisePath(path);
		}

		private String sanitisePath(String path) {
			if(!path.startsWith("/")){
				path = "/" + path;
			}
			if (!path.contains(".")) {
				path += ".3gp";
			}
			return Environment.getExternalStorageDirectory().getAbsolutePath() + path;
		}
		
		public boolean directoryCheck() throws IOException {
			String state = android.os.Environment.getExternalStorageState();
			if (!state.equals(android.os.Environment.MEDIA_MOUNTED)) {
				throw new IOException("SD Card is causing issues");
			}

			File directory = new File(AudioPath).getParentFile();
			if(!directory.exists() && !directory.mkdirs()) {
				throw new IOException("Path to file could not be created");
			}
			return true;
		}


		//superceded by surfaceCreated
		public void AudioRecordStart() throws IOException {
			String state = android.os.Environment.getExternalStorageState();
			if (!state.equals(android.os.Environment.MEDIA_MOUNTED)) {
				throw new IOException("SD Card is causing issues");
			}

			File directory = new File(AudioPath).getParentFile();
			if(!directory.exists() && !directory.mkdirs()) {
				throw new IOException("Path to file could not be created");
			}

			mRecorder = new MediaRecorder();
			mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
			mRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
			mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
			//mRecorder.setAudioEncodingBitRate(16);  //TODO Enable these if want to improve
			//mRecorder.setAudioSamplingRate(44100);  //audio quality
			mRecorder.setOutputFile(AudioPath);
			//TODO add in higher sampling and encoding rates

			try {
				mRecorder.prepare();
			} catch (IOException e) {
				Log.e(LOG_TAG, "prepare() for recording failed");
			}
			mRecorder.start();
		}


		@Override
		public IBinder onBind(Intent intent) {
			// TODO Auto-generated method stub
			return null;
		}
	}







	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_recording);

		if(android.os.Build.VERSION.SDK_INT >= 19){
			Window w = getWindow();
			w.setFlags(
					WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION,
					WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
			//	w.setFlags(
			//			WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS,
			//			WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
		} else {
			Log.v(LOG_TAG, "Not KitKat+");
		}

		//Location Setup
		locationTrail = new LinkedHashMap<Long, Location>();
		Intent intent = getIntent();
		intent.getParcelableExtra(MapViewActivity.START_LOCATION);
		Toast.makeText(this, "Got starter location!", Toast.LENGTH_SHORT).show();
		mLocationRequest = LocationRequest.create();
		mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
		mLocationRequest.setInterval(UPDATE_INTERVAL);
		mLocationRequest.setFastestInterval(FASTEST_INTERVAL_IN_SECONDS);

		// Open the shared preferences
		mPrefs = getSharedPreferences("SharedPreferences",
				Context.MODE_PRIVATE);
		// Get a SharedPreferences editor
		mEditor = mPrefs.edit();
		/*
		 * Create a new location client, using the enclosing class to
		 * handle callback.
		 */
		mLocationClient = new LocationClient(this, this, this);
		// Start with updates turned off
		mUpdatesRequested = true;
	}



	@Override
	protected void onStart() {
		super.onStart();
		Log.v(LOG_TAG, "into onStart");

		// Connect the client.
		mLocationClient.connect();
	}

	@Override
	protected void onPause() {
		// Save the current setting for updates
		mEditor.putBoolean("KEY_UPDATES_ON", mUpdatesRequested);
		mEditor.commit();
		super.onPause();
	}

	@Override
	protected void onResume() {
		super.onResume();
		/*
		 * Get any previous setting for location updates
		 * Gets "false" if an error occurs
		 */
		if (mPrefs.contains("KEY_UPDATES_ON")) {
			mUpdatesRequested =
					mPrefs.getBoolean("KEY_UPDATES_ON", false);

			// Otherwise, turn off location updates
		} else {
			mEditor.putBoolean("KEY_UPDATES_ON", false);
			mEditor.commit();
		}
	}    

	/*
	 * Called when the Activity is no longer visible at all.
	 * Stop updates and disconnect.
	 */
	@Override
	protected void onStop() {
		// If the client is connected
		if (mLocationClient.isConnected()) {
			/*
			 * Remove location updates for a listener.
			 * The current Activity is the listener, so
			 * the argument is "this".
			 */
			//removeLocationUpdates(this);
			//TODO FIX THIS, WHATEVER IT DOES...
		}
		/*
		 * After disconnect() is called, the client is
		 * considered "dead".
		 */
		mLocationClient.disconnect();
		super.onStop();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.recording, menu);
		ActionBar actionBar = getActionBar();
		actionBar.hide();
		return true;
	}

	// Define the callback method that receives location updates
	public void onLocationChanged(Location location) {
		// Report to the UI that the location was updated
		String msg = "Updated Location: " +
				Double.toString(location.getLatitude()) + "," +
				Double.toString(location.getLongitude());
		TextView text = (TextView) findViewById(R.id.current_location_ticker);
		text.setText(msg);
		Log.v(LOG_TAG, location.toString());
		locationTrail.put(location.getTime(), location);
	}

	//TODO fix with new private class changes
	public void stopRecording(View view){
		//mRecorder.stop();
		//mRecorder.release();
		//mRecorder=null;
		Intent intent = new Intent(this, UploadActivity.class);
		//intent.putExtra(TRAIL, locationTrail);
		//intent.putExtra(AUDIO, path);  //This may be incorrect
		startActivity(intent);
	}

	/*
	 * Called by Location Services when the request to connect the
	 * client finishes successfully. At this point, you can
	 * request the current location or start periodic updates
	 */
	@Override
	public void onConnected(Bundle dataBundle) {
		// Display the connection status
		Toast.makeText(this, "Connected", Toast.LENGTH_SHORT).show();
		Location startLocation = mLocationClient.getLastLocation();
		Log.v(LOG_TAG, startLocation.toString());
		locationTrail.put(startLocation.getTime(), startLocation);
		mLocationClient.requestLocationUpdates(mLocationRequest, this);
	}
	/*
	 * Called by Location Services if the connection to the
	 * location client drops because of an error.
	 */
	@Override
	public void onDisconnected() {
		// Display the connection status
		Toast.makeText(this, "Disconnected. Please re-connect.",
				Toast.LENGTH_SHORT).show();
	}
	/*
	 * Called by Location Services if the attempt to
	 * Location Services fails.
	 */
	@Override
	public void onConnectionFailed(ConnectionResult connectionResult) {
		/*
		 * Google Play services can resolve some errors it detects.
		 * If the error has a resolution, try sending an Intent to
		 * start a Google Play services activity that can resolve
		 * error.
		 */
		if (connectionResult.hasResolution()) {
			try {
				// Start an Activity that tries to resolve the error
				connectionResult.startResolutionForResult(
						this,
						CONNECTION_FAILURE_RESOLUTION_REQUEST);
				/*
				 * Thrown if Google Play services cancelled the original
				 * PendingIntent
				 */
			} catch (IntentSender.SendIntentException e) {
				// Log the error
				e.printStackTrace();
			}
		} else {
			/*
			 * If no resolution is available, display a dialog to the
			 * user with the error.
			 */
			System.err.println("No resolution available. Some form of error with reconnect.");
			//showErrorDialog(connectionResult.getErrorCode());
		}
	}

	// Define a DialogFragment that displays the error dialog
	public static class ErrorDialogFragment extends DialogFragment {
		// Global field to contain the error dialog
		private Dialog mDialog;
		// Default constructor. Sets the dialog field to null
		public ErrorDialogFragment() {
			super();
			mDialog = null;
		}
		// Set the dialog to display
		public void setDialog(Dialog dialog) {
			mDialog = dialog;
		}
		// Return a Dialog to the DialogFragment.
		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			return mDialog;
		}
	}
	/*
	 * Handle results returned to the FragmentActivity
	 * by Google Play services
	 */
	@Override
	protected void onActivityResult(
			int requestCode, int resultCode, Intent data) {
		// Decide what to do based on the original request code
		switch (requestCode) {
		case CONNECTION_FAILURE_RESOLUTION_REQUEST :
			/*
			 * If the result code is Activity.RESULT_OK, try
			 * to connect again
			 */
			switch (resultCode) {
			case Activity.RESULT_OK :
				/*
				 * Try the request again
				 */
				break;
			}
		}
	}
	@SuppressWarnings("unused")
	private boolean servicesConnected() {
		// Check that Google Play services is available
		int resultCode =
				GooglePlayServicesUtil.
				isGooglePlayServicesAvailable(this);
		// If Google Play services is available
		if (ConnectionResult.SUCCESS == resultCode) {
			// In debug mode, log the status
			Log.d("Location Updates",
					"Google Play services is available.");
			// Continue
			return true;
			// Google Play services was not available for some reason
		} else {
			// Get the error code
			// Get the error dialog from Google Play services
			Dialog errorDialog = GooglePlayServicesUtil.getErrorDialog(
					resultCode,
					this,
					CONNECTION_FAILURE_RESOLUTION_REQUEST);
			// If Google Play services can provide an error dialog
			if (errorDialog != null) {
				// Create a new DialogFragment for the error dialog
				ErrorDialogFragment errorFragment =
						new ErrorDialogFragment();
				// Set the dialog in the DialogFragment
				errorFragment.setDialog(errorDialog);
				// Show the error dialog in the DialogFragment
				errorFragment.show(
						getSupportFragmentManager(),
						"Location Updates");
			}
			return false;
		}
	}

	@Override
	public void surfaceChanged(SurfaceHolder arg0, int arg1, int arg2, int arg3) {
		// TODO Auto-generated method stub

	}

	@Override
	public void surfaceCreated(SurfaceHolder arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void surfaceDestroyed(SurfaceHolder arg0) {
		// TODO Auto-generated method stub

	}
}
